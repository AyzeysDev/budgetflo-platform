// apps/api/src/models/budget.model.ts
import { Timestamp } from 'firebase-admin/firestore';

/**
 * Represents a financial category that users can assign to budgets and transactions.
 * Categories are user-specific.
 */
export interface Category {
  id: string; // Firestore document ID
  userId: string; // ID of the user who owns this category
  name: string; // e.g., "Groceries", "Salary", "Entertainment"
  type: 'income' | 'expense'; // Type of category
  icon?: string | null; // Optional: Name or identifier for an icon (e.g., from Lucide icons)
  color?: string | null; // Optional: Hex color code for UI representation
  includeInBudget?: boolean; // Optional: Whether this category should be included in budget calculations (defaults to true if not set by service layer)
  createdAt: Timestamp | Date | string;
  updatedAt: Timestamp | Date | string;
  isSystemCategory?: boolean; // Flag for predefined categories (e.g., "Uncategorized")
}

/**
 * Represents a user-defined budget for a specific category or an overall budget over a period.
 * The 'isRecurring' field indicates whether this budget has an associated recurring rule.
 */
export interface Budget {
  id: string; // Firestore document ID
  userId: string; // ID of the user who owns this budget
  name: string; // e.g., "Monthly Groceries", "Overall Monthly Budget"
  categoryId?: string | null; // Foreign key linking to Category.id, null if it's an overall budget not tied to a specific category
  amount: number; // The budgeted amount (positive number)
  spentAmount: number; // Amount spent against this budget so far (calculated)
  period: 'monthly' | 'yearly' | 'custom'; // Budgeting period
  startDate: Timestamp | Date | string; // Start date of the budget period
  endDate: Timestamp | Date | string; // End date of the budget period
  isOverall?: boolean; // True if this is an overall budget for the period, false/undefined for category-specific.
  isRecurring?: boolean; // True if this budget has an associated recurring rule
  recurringRuleId?: string | null; // Reference to the RecurringBudget rule if applicable
  notes?: string | null;
  createdAt: Timestamp | Date | string;
  updatedAt: Timestamp | Date | string;
}

/**
 * Stores the rule for a recurring budget. This is the source of truth for recurring budgets.
 */
export interface RecurringBudget {
  id: string;
  userId: string;
  name: string;
  categoryId?: string | null; // null for overall budgets
  amount: number;
  recurrenceRule: string; // iCal RRULE string (e.g., 'FREQ=MONTHLY;INTERVAL=1')
  startDate: Timestamp;
  endDate?: Timestamp | null;
  isOverall?: boolean; // True if this is a recurring overall budget
  notes?: string | null;
  createdAt: Timestamp;
  updatedAt: Timestamp;
}

/**
 * A denormalized, pre-calculated summary for a single month for fast lookups.
 * Document ID should be in the format: {userId}_{YYYY-MM}
 */
export interface MonthlyBudget {
  userId: string;
  year: number;
  month: number; // 1-12
  totalBudgeted: number;
  totalSpent: number;
  // Breakdown of each category's budget and spending for the month.
  categoryBreakdown: {
    [categoryId: string]: {
      budgeted: number;
      spent: number;
      budgetId: string; // The ID of the budget or recurring budget rule
      name: string;
    }
  };
  updatedAt: Timestamp;
}

// --- Payloads for API requests ---

export interface CreateCategoryPayload {
  name: string;
  type: 'income' | 'expense';
  icon?: string | null;
  color?: string | null;
  includeInBudget?: boolean;
}

export interface UpdateCategoryPayload {
  name?: string;
  type?: 'income' | 'expense';
  icon?: string | null;
  color?: string | null;
  includeInBudget?: boolean;
}

export interface CreateBudgetPayload {
  name: string;
  categoryId?: string | null;
  amount: number;
  period: 'monthly' | 'yearly' | 'custom';
  startDate: string; // Expect ISO date string from client
  endDate: string;   // Expect ISO date string
  isOverall?: boolean;
  isRecurring?: boolean; // New field to indicate if a recurring rule should be created
  recurrenceRule?: string; // RRULE string if isRecurring is true
  notes?: string | null;
}

export interface UpdateBudgetPayload {
  name?: string;
  categoryId?: string | null;
  amount?: number;
  period?: 'monthly' | 'yearly' | 'custom';
  startDate?: string;
  endDate?: string;
  isOverall?: boolean;
  isRecurring?: boolean; // New field to indicate if a recurring rule should be created/updated
  recurrenceRule?: string; // RRULE string if isRecurring is true
  notes?: string | null;
}

export interface CreateRecurringBudgetPayload {
  name: string;
  categoryId?: string | null;
  amount: number;
  recurrenceRule: string; // To be generated by the frontend form
  startDate: string; // ISO String
  endDate?: string | null; // ISO String
  isOverall?: boolean;
  notes?: string | null;
}

export interface UpdateRecurringBudgetPayload {
  name?: string;
  amount?: number;
  recurrenceRule?: string;
  endDate?: string | null;
  notes?: string | null;
}

// --- Data Transfer Objects (DTOs) for API responses ---

export interface CategoryDTO {
  id: string;
  userId: string;
  name: string;
  type: 'income' | 'expense';
  icon: string | null;
  color: string | null;
  includeInBudget: boolean;
  isSystemCategory: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface BudgetDTO extends Omit<Budget, 'createdAt' | 'updatedAt' | 'startDate' | 'endDate'> {
  createdAt: string;
  updatedAt: string;
  startDate: string;
  endDate: string;
  isOverall: boolean;
  categoryId: string | null;
  isRecurring?: boolean;
  recurringRuleId?: string | null;
}
