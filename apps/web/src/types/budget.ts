// apps/web/src/types/budget.ts

// Corresponds to CategoryDTO from the backend
export interface WebAppCategory {
  id: string;
  userId: string;
  name: string;
  type: 'income' | 'expense';
  icon: string | null;
  color: string | null;
  includeInBudget: boolean;
  isSystemCategory: boolean;
  createdAt: string; // ISO date string
  updatedAt: string; // ISO date string
}

// Corresponds to BudgetDTO from the backend.
export interface WebAppBudget {
  id: string;
  userId: string;
  name: string;
  categoryId: string | null; // Null for overall budgets
  amount: number;
  spentAmount: number;
  period: 'monthly' | 'yearly' | 'custom';
  startDate: string; // ISO date string
  endDate: string;   // ISO date string
  isOverall: boolean; // True if this is an overall budget
  isRecurring?: boolean;
  recurringRuleId?: string | null;
  notes: string | null;
  createdAt: string; // ISO date string
  updatedAt: string; // ISO date string
}

// Payload for creating a new budget (overall or category-specific) via BFF
export interface WebAppCreateBudgetPayload {
  name: string;
  categoryId?: string | null;
  amount: number;
  period: 'monthly' | 'yearly' | 'custom';
  startDate: string; // ISO date string
  endDate: string;   // ISO date string
  isOverall?: boolean;
  isRecurring?: boolean; // NEW: Option to make it recurring
  recurrenceRule?: string; // NEW: RRULE if recurring
  notes?: string | null;
}

// Payload for updating an existing budget via BFF
export interface WebAppUpdateBudgetPayload {
  name?: string;
  categoryId?: string | null;
  amount?: number;
  period?: 'monthly' | 'yearly' | 'custom';
  startDate?: string;
  endDate?: string;
  isOverall?: boolean;
  notes?: string | null;
}

// Payload for setting/updating the overall budget via BFF
export interface WebAppSetOverallBudgetPayload {
    amount: number;
    period: 'monthly' | 'yearly'; // Overall budgets are typically monthly or yearly
    year: number;
    month?: number; // 1-12, required if period is 'monthly'
    notes?: string | null;
    isRecurring?: boolean; // NEW: Option to make it recurring
    recurrenceRule?: string; // NEW: RRULE if recurring
}

// Represents a budget item for display, especially for category budgets
// May include category details and calculated progress.
export interface BudgetDisplayItem extends WebAppBudget {
  categoryName?: string;
  categoryIcon?: string | null;
  categoryColor?: string | null;
  progress?: number; // Percentage of budget spent
  remainingAmount?: number;
}

// NEW: Recurring Budget Types
// Corresponds to RecurringBudget from the backend
export interface WebAppRecurringBudget {
  id: string;
  userId: string;
  name: string;
  categoryId: string | null; // null for overall budgets
  amount: number;
  recurrenceRule: string; // iCal RRULE string
  startDate: string; // ISO date string
  endDate: string | null; // ISO date string or null
  isOverall: boolean;
  notes: string | null;
  createdAt: string; // ISO date string
  updatedAt: string; // ISO date string
}

// Corresponds to MonthlyBudget from the backend
export interface WebAppMonthlyBudget {
  userId: string;
  year: number;
  month: number; // 1-12
  totalBudgeted: number;
  totalSpent: number;
  categoryBreakdown: {
    [categoryId: string]: {
      budgeted: number;
      spent: number;
      budgetId: string; // The ID of the budget or recurring budget rule
      name: string;
    }
  };
  updatedAt: string; // ISO date string
}

// Payload for creating a new recurring budget
export interface WebAppCreateRecurringBudgetPayload {
  name: string;
  categoryId?: string | null;
  amount: number;
  recurrenceRule: string; // To be generated by the frontend form
  startDate: string; // ISO date string
  endDate?: string | null; // ISO date string
  isOverall?: boolean;
  notes?: string | null;
}

// Payload for updating a recurring budget
export interface WebAppUpdateRecurringBudgetPayload {
  name?: string;
  amount?: number;
  recurrenceRule?: string;
  endDate?: string | null;
  notes?: string | null;
}

// Extended type for display with category information
export interface RecurringBudgetWithCategory extends WebAppRecurringBudget {
  category?: WebAppCategory;
}

// Type for category budget display in the monthly view
export interface CategoryBudgetDisplay {
  categoryId: string;
  categoryName: string;
  categoryIcon?: string | null;
  categoryColor?: string | null;
  budgetId: string;
  budgetName: string;
  budgeted: number;
  spent: number;
  progress: number; // Percentage (0-100)
  remainingAmount: number;
  isOverspent: boolean;
}

// Helper type for recurrence frequency
export type RecurrenceFrequency = 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'YEARLY';

// Helper type for creating recurrence rules in the UI
export interface RecurrenceConfig {
  frequency: RecurrenceFrequency;
  interval: number; // e.g., every 2 months
  byWeekDay?: number[]; // 0-6 (Sunday-Saturday)
  byMonthDay?: number; // 1-31
  endDate?: Date | null;
}
